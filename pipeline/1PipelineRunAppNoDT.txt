node {
   def mvnHome
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/WinterSchool/WinterSchool5'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'M3'
   }
   stage('BuildReading') {
      // Run the maven build
      env.JAVA_HOME="${tool 'JDK8'}"
      if (isUnix()) {
         sh "cd ./reading;'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('BuildBookstore') {
      // Run the maven build
      env.JAVA_HOME="${tool 'JDK8'}"
      if (isUnix()) {
         sh "cd ./bookstore;'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('clearStaging') {
       // we have to kill these existing processes. We learned that killing sometimes doesnt work the first time - so we try it twice :-)
       sh " for pid in \$(ps -ef|grep reading|grep java|awk '{print \$2}'); do kill -9 \$pid; done &"
       sh " for pid in \$(ps -ef|grep bookstore|grep java|awk '{print \$2}'); do kill -9 \$pid; done &"
       sh " for pid in \$(ps -ef|grep reading|awk '{print \$2}'); do kill -9 \$pid; done &"
       sh " for pid in \$(ps -ef|grep bookstore|awk '{print \$2}'); do kill -9 \$pid; done &"
   }    
   stage('deployIntoStaging') {
      // Run the maven build
      env.JAVA_HOME="${tool 'JDK8'}"
      if (isUnix()) {
         sh "java -jar ./reading/target/reading-0.0.1-SNAPSHOT.jar 2>&1 >reading.log & "
         sh "java -jar ./bookstore/target/bookstore-0.0.1-SNAPSHOT.jar 2>&1 >bookstore.log &"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('ValidateStageDeployment') {
      // Run the maven build
      env.JAVA_HOME="${tool 'JDK8'}"
      // will do a quick wget to hit the endpoints once - wait 5 seconds so that the servers can start
      sh "sleep 30"
      sh "wget http://${appip}:9090/recommended"
      sh "wget http://${appip}:9080/to-read"
   }
   stage ('DynatraceWebAPITests') {
      //required to define a parameter get the value from the property and then pass from the pipeline to the job
      // def appip = getProperty("appip")
      // echo appip
    
      //build job: 'Dynatrace WebAPI tests', parameters: [[$class: 'StringParameterValue', name: 'appip', value: appip]]
   }
   stage('LoadTest') {
      // TODO: RUN A REAL LOAD TEST AND THEN PROMOTE TO NEXT PHASE
      env.JAVA_HOME="${tool 'JDK8'}"
   }
   stage('DeployProduction') {
      // TODO: DEPLOY BUILD INTO A "PRODUCTION" ENVIRONMENT
      env.JAVA_HOME="${tool 'JDK8'}"
   }
}
